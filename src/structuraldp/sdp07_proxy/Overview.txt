Proxy - Ủy quyền

1. Định nghĩa

Provide a surrogate or placeholder for another object to control access to it.

Proxy có nghĩa là ủy quyền hay đại diện. Mục đích xây dựng Proxy pattern để tạo ra 1 object sẽ ủy quyền,
thay thế cho một object khác.

Proxy là mẫu thiết kế mà ở đó tất cả các truy cập trực tiếp đến 1 object nào đó sẽ được chuyển hướng vào
1 object trung gian (Proxy class). Proxy đại diện cho 1 object khác thực thi các method, method đó có thể
được định nghĩa lại cho phù hợp với mục đích sử dụng.

Proxy Pattern còn được gọi là Surrogate (thay thế) hoặc Placeholder (trình giữ chỗ).

2. Phân loại
- Virtual Proxy: tạo ra 1 object trung gian mỗi khi có yêu cầu tại thời điểm thực thi ứng dụng, nhờ đó tăng
hiệu suất của ứng dụng
- Protection Proxy: Phạm vi truy cập của các client khác nhau sẽ khác nhau, Protection proxy sẽ kiểm tra
các quyền truy cập của client khi có một dịch vụ được yêu cầu.
- Remote Proxy: client truy cập qua remote proxy để chiếu tới 1 object được bảo vệ nằm bên ngoài ứng dụng.
- Monitor proxy: monitor proxy sẽ thiết lập các bảo mật trên object cần bảo vệ, ngăn không cho client truy
cập một số trường quan trọng của object. Có thể theo dõi, giám sát, ghi log việc truy cập, sử dụng object.
- Firewall Proxy: bảo vệ object từ chối các yêu cầu xuất phát từ các client ko tín nhiệm.
- Cache proxy: cung cấp ko gian lưu trữ tạm thời cho các kết quả trả về từ object nào đó, kết quả này sẽ
được tái sử dụng cho các client chia sẻ chung 1 yêu cầu gửi đến. Loại Proxy hoạt động tương tự như Flyweight.
- Smart Reference Proxy: nơi kiểm soát các hoạt động bổ sung mỗi khi object được tham chiếu.
- Synchronization Proxy: đảm bảo nhiều client có thể truy cập vào cùng 1 object mà ko gây ra xung đột. Khi
một client nào đó chiếm dụng khóa khá lâu khiến cho số lượng các client trong danh sách hàng đợi cứ tăng
lên -> hoạt động hệ thống bị trì trệ, có thể dẫn đến hiện tượng tắc nghẽn
- Copy-On-Write Proxy: đảm bảo rằng ko có client nào phải chờ vô thời hạn -> Thiết kế rất phức tạp

2. Thành phần

Proxy có những đặc điểm chung sau:
- CUng cấp mức truy cập gián tiếp qua 1 object
- Tham chiếu vào object đích và chuyển tiếp các yêu cầu đến object đó
- Cả proxy và object đích đều kế thừa hoặc thực thi chung 1 lớp giao diện.

	Client     ________uses_______________		<<Interface>>
												Subject
												  doSomething()
												       |
							       _____implements_____|_______implements______
						          |                                            |
			 ________________   Proxy										RealSubject
			|		     		  Subject realSubject						  allState
	realSubject.dosomething()	  doSomething()								  oSomething()
					     
Các thành phần:
	- Subject: interface định nghĩa các method để giao tiếp với client. Đối tượng này xác định giao diện
	chung cho RealSubject và proxy để proxy có thể được sử dụng bất kỳ nơi nào mà RealSubject mong đợi.
	- Proxy: class sẽ thực hiện các bước kiểm tra và gọi tới object của class service thật để thực hiện thao
	tác sau khi kiểm tra. Nó duy trì 1 tham chiếu đến RealSubject để Proxy có thể truy cập nó. Nó cũng thực
	hiện các giao diện tương tự nhu RealSubject để có thể được sử dụng thay cho RealSubject. Proxy cung có
	thể tạo or xóa, điều khiển truy cập RealSubject.
	- RealSubject: class service sẽ thực hiện các thao tác thực sự, đây là object chính mà proxy đại diện.
	- Client: object cần sử dụng RealSubject.
                             	
3. Cách thực hiện và Ví dụ

3.1 Virtual Proxy
Sử dụng lazy loading, trì hoãn tạo ra real subject trong proxy class, chỉ khi nào dùng mới thật sự khởi tạo.
-> tăng hiệu suất, giảm chi phí khởi tạo và lưu trữ.
Ví dụ một website hiển thị h/a, có thể có rất nhiều ảnh trên 1 trang hay 1 ảnh được hiển thị nhiều lần.
Trong khi chỉ cần load ảnh khi nó cần hiển thị (khi scroll tới nơi đặt image)

3.2 Protection proxy
Yêu cầu người gọi proxy class phải chứng thực trước khi proxy truy cập vào real class.


	Client     ________uses_______________		<<Interface>>
												UserService
												  load()
												  insert()
												       |
							       _____implements_____|_______implements______
						          |                                            |
			 ________________ UserSerrviceProxy								UserServiceImpl
			|		     		UserService userServiceImpl  				  void load()
	userService.load()			void load() 								  insert()
								void insert()
								   |_______________isAdmin()
								   				   userService.insert()

5. Ưu nhược điểm
Cãi thiện Performance thông qua lazy loading, chỉ tải các tài nguyên khi chúng được yêu cầu.
Nó cung cấp sự bảo vệ cho đối tượng thực từ thế giới bên ngoài.
Giảm chi phí khi có nhiều truy cập vào đối tượng có chi phí khởi tạo ban đầu lớn.
Dễ nâng cấp, bảo trì.

Nhược điểm:



6. Sử dụng khi nào?
Khi muốn bảo vệ quyền truy xuất vào các phương thức của object thực.
Khi cần một số thao tác bổ sung trước khi thực hiện phương thức của object thực.
Khi tạo đối tượng ban đầu là theo yêu cầu hoặc hệ thống yêu cầu sự chậm trễ khi tải một số tài
nguyên nhất định (lazy loading).
Khi có nhiều truy cập vào đối tượng có chi phí khởi tạo ban đầu lớn.
Khi đối tượng gốc tồn tại trong môi trường từ xa (remote).
Khi đối tượng gốc nằm trong một hệ thống cũ hoặc thư viện của bên thứ ba.
Khi muốn theo dõi trạng thái và vòng đời đối tượng.

7. So sánh Proxy và Decorator
- Proxy tạo ra đại diện cho object
- Decorator thêm tính năng vào object trước đó  -> Smart Proxy