Decorator

1. Định nghĩa

Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative
to subclassing for extending functionality

Decorator cho phép người dùng thêm chức năng mới vào đối tượng hiện tại mà ko muốn ảnh hưởng đến các
đối tượng khác. Kiểu thiết kế này có cấu trúc hoạt động như một lớp bao bọc cho lớp hiện có. Mỗi khi
cần thêm tính năng mới, đối tượng hiện có được wrap trong 1 object mới.

Decorator sử dụng composition thay vì inheritance để mở rộng đối tượng. Decorator còn đc gọi là Wrapper
hay Smart Proxy.

2. Thành phần

Decorator hoạt động dựa trên 1 object đặt biệt đc gọi là decorator hay wrapper. Nó có cùng một interface
như đối tượng mà nó cần bao bọc. Tất cả các wrapper có một trường để lưu trữ 1 giá trị của object gốc.
Hầu hết các wrapper khởi tạo trường đó với 1 object được truyền vào constructor của chúng.
                                                                           
									<<Interface>>
	Client	________use__________	Component		    ________________
									  doOperation()						|
									      |								| child
						___implement______|_______implement_______      |
					   |										  |     |
			   ConcreteComponent                            <<Abstract class>>
			     doOperation()                              Decorator
			     											  Component wrappee
			     											  doOperation()
			     											  doAdditionalOperation()
			     												     |
			     										___extends___|___extends___
			     									   |                           |
			     								ConcreteDecorator            ConcreteDecorator
			     								  doOperation()				   doOperation()
			     								  doAdditionalOperation()      doAdditionalOperation()
			     								  
Các thành phần:
	- Component: interface quy định các method chung cần phải có cho tất cả các thành phần tham gia
	- ConcreteComponent: là lớp hiện thực các phương thức của Component
	- Decorator: một abstract class dùng để duy trì một tham chiếu của object Component và đônh thời cài
	đặt các phương thức của Component.
	- ConcreteDecorator: là lớp hiện thực các phương thức của Decorator, cài đặt thêm các tính năng mới
	cho Component
	- Client: đối tượng sử dụng
                                                                        	
3. Cách thực hiện và Ví dụ

Hệ thống quản lý dự án:
	- Employee: thực hiện công việc (doTask), tham gia vào dự án (join), rời khỏi dự án (terminate).
	- Team member: báo cáo task được giao (report task), cộng tác với các thành viên khác (coordinate 
	with others).
	- Team lead: lên kế hoạch (planning), hỗ trợ các thành viên phát triển (motivate), theo dõi chất
	lượng công việc và thời gian (monitor).
	- Manager: tạo các yêu cầu dự án (create requirement), giao nhiệm vụ cho thành viên (assign task),
	quản lý tiến độ dự án (progress management).
	
Cách làm thông thường như sau:
- Tạo lớp Employee với các function: doTask(), join(), terminate()
- Các lớp còn lại được tạo bằng cách kế thừa từ Employee:
	+ TeamMember: define thêm các function reportTask(), coordinateWithOthers()
	+ TeamLeader: define thêm function planning(), motivate(), monitor()
	+ Manager: createRequirement(), assignTask(), manageProgress()
Khi 1 thành viên trong nhóm	thành 1 Team Lead, chúng ta phải tạo 1 object mới của TeamLead và object 
trước đó tham chiếu vào nhân viên đó (Team Member) có thể bị hủy or lưu trữ. Một trường hợp khác là khi
một nhân viên có thể kiêm nhiệm đồng thời các role Team Member, Team Lead, Manager khi đó cần tạo hai
object cho 1 nhân viên là hoàn toàn sai.

Với Decorator, chúng ta có sơ đồ mới như sau

									<<Interface>>
	Client	________use__________	EmployeeComponent   ________________
									  doTask()  						|
									  join(Date joinDate)				|
									  terminate(Date terminateDate)		|
									      |								| child
						___implement______|_______implement_______      |
					   |										  |     |
		EmployeeConcreteComponent                            <<Abstract class>>
		  doTask()				                             EmployeeDecorator
		  join(Date joinDate)								   EmployeeComponent employee
		  terminate(Date terminateDate)						   doTask()
			     											   join(Date joinDate)
			     											   terminate(Date terminateDate)
			     												     |
			     		______extends___________________extends______|____extends___
			     	   |							|                               |
				  TeamMember					TeamLeader						Manager
				    performTask()				  planning()					  createRequirement()
				    coordinateWithOthers		  motivate()					  assignTask()
				    							  monitor()						  manageProgress()
				    							  



5. Ưu nhược điểm
- Tăng cường khả năng mở rộng của đối tượng bởi những thay đổi được thực hiện bằng cách implement trên
các lớp mới
- Client sẽ ko nhận thấy sự khác biệt khi bạn đưa cho nó một wrapper thay vì đối tượng gốc
- Một đối tượng có thể được bao bọc bởi nhiếu wrapper cùng lúc
- Cho phép thêm hoặc xóa tính năng của một đối tượng lúc thực thi.

Nhược điểm:


6. Sử dụng khi nào?
- Khi muốn thêm tính năng mới cho các object mà ko ảnh hưởng đến các object này
- Khi ko thể mở rộng 1 object bằng cách kế thừa (khi class dùng từ khóa final)
- Trong 1 số case mà việc sử dụng kế thừa mất nhiều công sức trong việc code

7. So sánh Decorator và Adapter
Giống: cùng sử dụng composition để cài đặt
Khác:
- Decorator cho phép thêm 1 tính năng mới vào 1 object nhưng ko đc phép sử dụng kế thừa. Apdater được
sử dụng khi có một interface và muốn ánh xạ interface đó đến 1 object khác có vai trò chức năng tương
tự nhưng là 1 interface khác.
- Decorator có xu hướng hoạt động trên 1 object, Adapter hoạt động trên nhiều object.

